"""Render configuration for dump1090/readsb receivers."""
from __future__ import annotations

import argparse
import os
from pathlib import Path
from string import Template
from typing import Dict

DEFAULTS: Dict[str, str] = {
    "RTL_DEVICE": "0",
    "RTL_GAIN": "max",
    "RTL_PPM": "0",
    "RECEIVER_LAT": "0.0",
    "RECEIVER_LON": "0.0",
    "JSON_DIR": "/run/readsb",
    "MLAT_PORT": "30104",
    "BEAST_OUTPUT": "30005",
    "RAW_OUTPUT": "30002",
    "MAX_RANGE": "360",
}

READSB_TEMPLATE = Template(
    """# Autogenerated by configure_readsb.py\n"
    "ENABLED=yes\n"
    "RECEIVER_OPTIONS=\"--device-type rtlsdr --device-index ${RTL_DEVICE} --ppm ${RTL_PPM} --gain ${RTL_GAIN}\"\n"
    "DECODER_OPTIONS=\"--modeac --adaptive-range\"\n"
    "NET_OPTIONS=\"--mlat --net --mlat-port ${MLAT_PORT} --beast-output-port ${BEAST_OUTPUT} --raw-port ${RAW_OUTPUT}\"\n"
    "JSON_OPTIONS=\"--write-json ${JSON_DIR} --json-location-accuracy 2\"\n"
    "LAT=${RECEIVER_LAT}\n"
    "LON=${RECEIVER_LON}\n"
    """
)

DUMP1090_TEMPLATE = Template(
    """# Autogenerated by configure_readsb.py\n"
    "RECEIVER_OPTIONS=\"--device-type rtlsdr --device-index ${RTL_DEVICE} --ppm ${RTL_PPM} --gain ${RTL_GAIN}\"\n"
    "DECODER_OPTIONS=\"--modeac --adaptive-range\"\n"
    "NET_OPTIONS=\"--net --mlat --mlat-port ${MLAT_PORT} --beast ${BEAST_OUTPUT} --raw ${RAW_OUTPUT}\"\n"
    "JSON_OPTIONS=\"--write-json ${JSON_DIR} --max-range ${MAX_RANGE}\"\n"
    "LAT=${RECEIVER_LAT}\n"
    "LON=${RECEIVER_LON}\n"
    """
)


def render(template: Template, values: Dict[str, str]) -> str:
    return template.safe_substitute(values)


def build_values() -> Dict[str, str]:
    values = DEFAULTS.copy()
    for key in DEFAULTS:
        if key in os.environ:
            values[key] = os.environ[key]
    # Additional convenience aliases
    if "RTL_DEVICE_INDEX" in os.environ:
        values["RTL_DEVICE"] = os.environ["RTL_DEVICE_INDEX"]
    if "READSB_JSON_DIR" in os.environ:
        values["JSON_DIR"] = os.environ["READSB_JSON_DIR"]
    if "DUMP1090_JSON_DIR" in os.environ:
        values["JSON_DIR"] = os.environ["DUMP1090_JSON_DIR"]
    return values


def main() -> None:
    parser = argparse.ArgumentParser(description="Render dump1090/readsb configuration")
    parser.add_argument(
        "--target",
        choices=["readsb", "dump1090"],
        default="readsb",
        help="Which receiver to generate configuration for.",
    )
    parser.add_argument(
        "--template",
        type=Path,
        default=None,
        help="Optional custom template file to render instead of the built-in presets.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        required=True,
        help="Destination file for the rendered configuration.",
    )
    args = parser.parse_args()

    values = build_values()
    if args.template:
        template = Template(args.template.read_text(encoding="utf-8"))
    else:
        template = READSB_TEMPLATE if args.target == "readsb" else DUMP1090_TEMPLATE
    rendered = render(template, values)
    args.output.parent.mkdir(parents=True, exist_ok=True)
    args.output.write_text(rendered, encoding="utf-8")


if __name__ == "__main__":  # pragma: no cover
    main()
