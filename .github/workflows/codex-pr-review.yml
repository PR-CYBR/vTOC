---
name: Codex PR review

'on':
  pull_request:
    branches:
      - codex
      - stage

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      CODEX_API_KEY: ${{ secrets.CODEX_API_KEY }}
      CODEX_BASE_URL: ${{ vars.CODEX_BASE_URL }}
      CODEX_REVIEW_MODEL: ${{ vars.CODEX_REVIEW_MODEL }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install lint tooling
        if: github.event.pull_request.base.ref != 'stage'
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: Lint workflow files
        if: github.event.pull_request.base.ref != 'stage'
        run: |
          yamllint .github/workflows

      - name: Run Codex review
        id: codex
        env:
          GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          set -euo pipefail
          MODEL="${CODEX_REVIEW_MODEL:-gpt-4.1}"
          python scripts/automation/codex_pr_review.py \
            --base "${GITHUB_BASE_SHA}" \
            --head "${GITHUB_HEAD_SHA}" \
            --model "${MODEL}" \
            --output review.json

      - name: Post Codex findings
        if: steps.codex.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'review.json';
            if (!fs.existsSync(path)) {
              core.warning('Codex review output not found.');
              return;
            }
            const data = JSON.parse(fs.readFileSync(path, 'utf8'));
            const lines = [];
            lines.push('### Codex review summary');
            lines.push('');
            lines.push(data.summary || 'No summary generated.');
            lines.push('');
            lines.push(`**Risk level:** ${data.risk_level || 'UNKNOWN'}`);
            if (
              Array.isArray(data.recommendations) &&
              data.recommendations.length > 0
            ) {
              lines.push('');
              lines.push('**Recommendations:**');
              for (const item of data.recommendations) {
                lines.push(`- ${item}`);
              }
            }
            if (data.notes) {
              lines.push('');
              lines.push('**Notes:**');
              lines.push(data.notes);
            }
            const body = lines.join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });

      - name: Fail on high risk
        if: steps.codex.outcome == 'success'
        run: |
          set -euo pipefail
          python - <<'PY'
          import json
          from pathlib import Path

          data = json.loads(Path('review.json').read_text())
          if data.get('risk_level', '').upper() == 'HIGH':
              raise SystemExit('Codex flagged this pull request as HIGH risk.')
          PY
