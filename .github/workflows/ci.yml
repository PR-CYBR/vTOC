name: CI

permissions:
  contents: read
  packages: read

on:
  push:
    branches:
      - main
      - prod
      - stage
  pull_request:
    branches:
      - main
      - prod
      - stage
  workflow_dispatch:

jobs:
  alembic-migrations:
    name: Alembic migrations (${{ matrix.station.slug }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        station:
          - slug: toc-s1
            schema: toc_s1
          - slug: toc-s2
            schema: toc_s2
          - slug: toc-s3
            schema: toc_s3
          - slug: toc-s4
            schema: toc_s4
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: vtoc
          POSTGRES_USER: vtoc
          POSTGRES_PASSWORD: vtocpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U vtoc"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Alembic dependencies
        run: python -m pip install -r backend/requirements.runtime.txt
      - name: Ensure schema exists
        env:
          BASE_DATABASE_URL: postgresql+psycopg2://vtoc:vtocpass@localhost:5432/vtoc
          TARGET_SCHEMA: ${{ matrix.station.schema }}
        run: |
          python - <<'PY'
          import os
          from sqlalchemy import create_engine, text

          engine = create_engine(os.environ["BASE_DATABASE_URL"], future=True)
          schema = os.environ["TARGET_SCHEMA"]

          with engine.begin() as connection:
              connection.execute(text(f'CREATE SCHEMA IF NOT EXISTS "{schema}"'))
          PY
      - name: Run Alembic upgrade
        working-directory: backend
        env:
          POSTGRES_STATION_ROLE: ${{ matrix.station.slug }}
          DATABASE_URL: postgresql+psycopg2://vtoc:vtocpass@localhost:5432/vtoc?options=-csearch_path%3D${{ matrix.station.schema }}
        run: alembic upgrade head

  build-and-test:
    permissions:
      packages: ${{ github.event_name == 'push' && 'write' || 'read' }}
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_PREFIX: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml
      - name: Enable corepack
        run: corepack enable
      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile
      - name: Frontend lint
        working-directory: frontend
        run: pnpm lint
      - name: Frontend type check
        working-directory: frontend
        run: pnpm typecheck
      - name: Frontend tests
        working-directory: frontend
        run: |
          CI=1 pnpm test -- --watch=false --passWithNoTests
          pnpm build
      - name: Install Playwright browsers
        working-directory: frontend
        run: pnpm exec playwright install --with-deps
      - name: Playwright smoke tests
        working-directory: frontend
        run: pnpm test:playwright -- --reporter=line
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Container setup fallback (no Terraform)
        run: |
          set -euo pipefail
          PY_DIR="$(dirname "$(command -v python)")"
          CLEAN_PATH="$PATH"
          if command -v terraform >/dev/null 2>&1; then
            TF_DIR="$(dirname "$(command -v terraform)")"
            CLEAN_PATH="$(TF_DIR="$TF_DIR" python - <<'PY'
import os
import sys

path = os.environ.get('PATH', '')
tf_dir = os.environ.get('TF_DIR')
parts = []
for entry in path.split(':'):
    if not entry:
        continue
    if tf_dir and os.path.abspath(entry) == os.path.abspath(tf_dir):
        continue
    parts.append(entry)
sys.stdout.write(':'.join(parts))
PY
)"
          fi
          if [[ -n "$PY_DIR" && ":$CLEAN_PATH:" != *":$PY_DIR:"* ]]; then
            CLEAN_PATH="$CLEAN_PATH:$PY_DIR"
          fi
          export PATH="$CLEAN_PATH"
          export VTOC_COMPOSE_FILENAME="$GITHUB_WORKSPACE/docker-compose.generated.yml"
          if command -v terraform >/dev/null 2>&1; then
            echo "Terraform still available on PATH" >&2
            exit 1
          fi
          ./scripts/setup_container.sh --build-local
      - name: Upload generated compose artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-generated
          path: '${{ github.workspace }}/docker-compose.generated.yml'
      - name: Install Python dependencies
        run: python -m pip install -r backend/requirements.runtime.txt -r backend/requirements.dev.txt
      - name: Python lint
        run: ruff check backend agents
      - name: Python type check
        run: mypy --config-file mypy.ini
      - name: Backend tests
        run: pytest -q
      - name: Validate Spec Kit tasks
        run: python -m scripts.bootstrap_cli spec check
      - name: Set backend image tag (PR)
        if: github.event_name == 'pull_request'
        run: echo "BACKEND_IMAGE_TAG=vtoc-backend:pr-${{ github.sha }}" >> "$GITHUB_ENV"
      - name: Set backend image tag (push)
        if: github.event_name != 'pull_request'
        run: echo "BACKEND_IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend:${{ github.sha }}" >> "$GITHUB_ENV"
      - name: Build backend image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend:latest
      - name: Build backend image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          load: true
          tags: |
            vtoc-backend:pr-${{ github.sha }}
      - name: Build frontend image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:latest
      - name: Build frontend image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          load: true
          tags: |
            vtoc-frontend:pr-${{ github.sha }}
      - name: Build scraper image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./agents/scraper
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/scraper:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/scraper:latest
      - name: Build scraper image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./agents/scraper
          push: false
          load: true
          tags: |
            vtoc-scraper:pr-${{ github.sha }}
      - name: Smoke test backend
        run: |
          docker run -d --rm -e DATABASE_URL=sqlite:/// -p 8080:8080 --name vtoc-backend-test \
            "$BACKEND_IMAGE_TAG"
          sleep 5
          curl -f http://localhost:8080/healthz
          curl -f http://localhost:8080/api/v1/agent-actions/audits
        shell: bash
      - name: Cleanup smoke container
        if: always()
        run: docker rm -f vtoc-backend-test || true
