name: Reusable Container Build

on:
  workflow_call:
    inputs:
      release_tag:
        description: Optional release tag for images (overrides SHA in compose manifest).
        required: false
        type: string
    outputs:
      scan_status:
        description: Result of vulnerability scans.
        value: ${{ jobs.publish.outputs.scan_status }}
      push_status:
        description: Result of registry pushes.
        value: ${{ jobs.publish.outputs.push_status }}

jobs:
  publish:
    name: Build, scan, and publish containers
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      GHCR_REGISTRY: ghcr.io
      GHCR_IMAGE_REPOSITORY: ${{ github.repository }}
      DOCKERHUB_REGISTRY: docker.io
    outputs:
      scan_status: ${{ steps.build_summary.outputs.scan_status }}
      push_status: ${{ steps.build_summary.outputs.push_status }}
    steps:
      - uses: actions/checkout@v4
      - name: Lowercase repositories
        id: repo
        env:
          GHCR_IMAGE_REPOSITORY: ${{ env.GHCR_IMAGE_REPOSITORY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          set -euo pipefail
          if [[ -z "${DOCKERHUB_USERNAME:-}" ]]; then
            echo "Docker Hub username secret must be provided" >&2
            exit 1
          fi
          echo "ghcr_repo=$(echo "${GHCR_IMAGE_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          echo "dockerhub_namespace=$(echo "${DOCKERHUB_USERNAME}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Compute image tags
        id: meta
        env:
          DISPATCH_TAG: ${{ inputs.release_tag }}
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          GHCR_REGISTRY: ${{ env.GHCR_REGISTRY }}
          GHCR_REPO: ${{ steps.repo.outputs.ghcr_repo }}
          DOCKERHUB_REGISTRY: ${{ env.DOCKERHUB_REGISTRY }}
          DOCKERHUB_NAMESPACE: ${{ steps.repo.outputs.dockerhub_namespace }}
        run: |
          set -euo pipefail
          release_tag="${DISPATCH_TAG:-}"
          if [[ "${REF_TYPE}" == "tag" ]]; then
            release_tag="${REF_NAME}"
          fi
          primary_tag="${SHA}"
          manifest_tag="${SHA}"
          if [[ -n "${release_tag}" ]]; then
            manifest_tag="${release_tag}"
          fi
          ghcr_backend_tags="${GHCR_REGISTRY}/${GHCR_REPO}/backend:${SHA}\n${GHCR_REGISTRY}/${GHCR_REPO}/backend:latest"
          ghcr_frontend_tags="${GHCR_REGISTRY}/${GHCR_REPO}/frontend:${SHA}\n${GHCR_REGISTRY}/${GHCR_REPO}/frontend:latest"
          ghcr_scraper_tags="${GHCR_REGISTRY}/${GHCR_REPO}/scraper:${SHA}\n${GHCR_REGISTRY}/${GHCR_REPO}/scraper:latest"
          dockerhub_backend_tags="${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/backend:${SHA}\n${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/backend:latest"
          dockerhub_frontend_tags="${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/frontend:${SHA}\n${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/frontend:latest"
          dockerhub_scraper_tags="${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/scraper:${SHA}\n${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/scraper:latest"
          if [[ -n "${release_tag}" ]]; then
            ghcr_backend_tags+="\n${GHCR_REGISTRY}/${GHCR_REPO}/backend:${release_tag}"
            ghcr_frontend_tags+="\n${GHCR_REGISTRY}/${GHCR_REPO}/frontend:${release_tag}"
            ghcr_scraper_tags+="\n${GHCR_REGISTRY}/${GHCR_REPO}/scraper:${release_tag}"
            dockerhub_backend_tags+="\n${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/backend:${release_tag}"
            dockerhub_frontend_tags+="\n${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/frontend:${release_tag}"
            dockerhub_scraper_tags+="\n${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/scraper:${release_tag}"
          fi
          backend_tags="${ghcr_backend_tags}\n${dockerhub_backend_tags}"
          frontend_tags="${ghcr_frontend_tags}\n${dockerhub_frontend_tags}"
          scraper_tags="${ghcr_scraper_tags}\n${dockerhub_scraper_tags}"
          {
            echo "backend_tags<<TAGS"
            echo "${backend_tags}"
            echo TAGS
            echo "frontend_tags<<TAGS"
            echo "${frontend_tags}"
            echo TAGS
            echo "scraper_tags<<TAGS"
            echo "${scraper_tags}"
            echo TAGS
            echo "manifest_tag=${manifest_tag}"
          } >> "$GITHUB_OUTPUT"
      - name: Build backend image for scanning
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          load: true
          platforms: linux/amd64
          tags: backend:scan
      - name: Scan backend image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: backend:scan
          severity: CRITICAL
          exit-code: '1'
          ignore-unfixed: true
      - name: Build frontend image for scanning
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          load: true
          platforms: linux/amd64
          tags: frontend:scan
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: frontend:scan
          severity: CRITICAL
          exit-code: '1'
          ignore-unfixed: true
      - name: Build scraper image for scanning
        uses: docker/build-push-action@v6
        with:
          context: ./agents/scraper
          load: true
          platforms: linux/amd64
          tags: scraper:scan
      - name: Scan scraper image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: scraper:scan
          severity: CRITICAL
          exit-code: '1'
          ignore-unfixed: true
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.backend_tags }}
      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.frontend_tags }}
      - name: Build and push scraper image
        uses: docker/build-push-action@v6
        with:
          context: ./agents/scraper
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.scraper_tags }}
      - name: Generate compose manifest
        env:
          VTOC_IMAGE_PREFIX: ${{ env.GHCR_REGISTRY }}/${{ steps.repo.outputs.ghcr_repo }}
          MANIFEST_TAG: ${{ steps.meta.outputs.manifest_tag }}
        run: |
          scripts/setup_container.sh --pull --image-tag "${MANIFEST_TAG}"
      - name: Upload compose manifest artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: docker-compose.generated.yml
          if-no-files-found: error
      - name: Attach compose file to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: docker-compose.generated.yml
          tag_name: ${{ github.ref_name }}
      - name: Record build status
        id: build_summary
        if: success()
        run: |
          {
            echo "scan_status=passed"
            echo "push_status=passed"
          } >> "$GITHUB_OUTPUT"
