version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vtoc-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vtoc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vtoc_pass}
      POSTGRES_DB: ${POSTGRES_DB:-vtoc_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - vtoc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vtoc_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vtoc-backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vtoc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vtoc_pass}
      POSTGRES_DB: ${POSTGRES_DB:-vtoc_db}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      API_SECRET_KEY: ${API_SECRET_KEY:-dev_secret_key}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vtoc-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vtoc-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost/api}
    depends_on:
      - backend
    networks:
      - vtoc-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: vtoc-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/dynamic:/dynamic:ro
    networks:
      - vtoc-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: vtoc-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/workflows
    networks:
      - vtoc-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=PathPrefix(`/n8n`)"
      - "traefik.http.routers.n8n.entrypoints=web"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  # Wazuh Manager (Security Monitoring)
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: vtoc-wazuh-manager
    hostname: wazuh-manager
    environment:
      - INDEXER_URL=https://wazuh-indexer:9200
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=${WAZUH_API_PASSWORD:-SecretPassword}
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
      - SSL_CERTIFICATE=/etc/ssl/filebeat.pem
      - SSL_KEY=/etc/ssl/filebeat.key
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
    networks:
      - vtoc-network

  # Agent Automation Service
  agent-service:
    build:
      context: ./agents
      dockerfile: Dockerfile
    container_name: vtoc-agents
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-vtoc_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vtoc_pass}
      - POSTGRES_DB=${POSTGRES_DB:-vtoc_db}
      - API_URL=http://backend:8000
    depends_on:
      - backend
      - postgres
    volumes:
      - ./agents/modules:/app/modules
      - ./agents/config:/app/config
    networks:
      - vtoc-network

networks:
  vtoc-network:
    driver: bridge

volumes:
  postgres_data:
  n8n_data:
  wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
